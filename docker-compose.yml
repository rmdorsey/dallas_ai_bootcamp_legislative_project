version: "3.8"

services:
  fastapi:
      build:
        context: .
        dockerfile: fastapi-app/Dockerfile
      container_name: fastapi
      ports:
        - "8000:8000"
      networks:
        - legislative_analysis_network
      # depends_on:
      #   zookeeper:
      #     condition: service_healthy
      #   kafka:
      #     condition: service_healthy
      #   cassandra:
      #     condition: service_healthy
      volumes:
      - ./fastapi-app:/app
      - ./shared:/app/shared
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 10s
      # Run Uvicorn in reload mode, watching /app for changes
      command:
        - uvicorn
        - main:app
        - --host
        - "0.0.0.0"
        - --port
        - "8000"
        - --reload
        - --reload-dir
        - /app
  chunk_testing_framework:
    build:
      context: ./chunk_testing_framework
      dockerfile: Dockerfile
    container_name: chunk_testing_framework
    ports:
      - "8002:8000"
    volumes:
      - ./chunk_testing_framework:/app
    networks:
      - legislative_analysis_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/healthz" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command:
      - uvicorn
      - app.main:app
      - --host
      - "0.0.0.0"
      - --port
      - "8000"
      - --reload
      - --reload-dir
      - /app

  chromadb:
    image: chromadb/chroma:1.0.12
    container_name: chromadb
    ports:
      - "8001:8000"                # map host 8001 → container 8000
    volumes:
      - ./chromadb:/chroma/chroma # persist data locally
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=FALSE
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - legislative_analysis_network
    depends_on:
      - fastapi 

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama:/root/.ollama
    networks:
      - legislative_analysis_network
    tty: true
    restart: always

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    volumes:
      - open-webui:/app/backend/data
    depends_on:
      - ollama
    ports:
      - 3000:8080
    environment:
      - 'OLLAMA_BASE_URL=http://ollama:11434'
      - 'WEBUI_SECRET_KEY='
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      - legislative_analysis_network
    restart: unless-stopped
  
  # angular:
  #   build:
  #     context: .
  #     dockerfile: angular-app/Dockerfile.dev
  #   container_name: angular-dev
  #   ports:
  #     - "4200:4200"
  #   volumes:
  #     - ./angular-app:/app           # your code in
  #     - /app/node_modules            # keep container’s node_modules
  #   environment:
  #     - CHOKIDAR_USEPOLLING=true
  #   networks:
  #     - legislative_analysis_network
  #   depends_on:
  #     - fastapi

  react:
     build:
       context: .
       dockerfile: react-app/Dockerfile.dev   # a "Dockerfile.dev" that just does `npm install` + `npm run dev`
     container_name: react-dev
     volumes:
       - ./react-app:/app             # your source in
       - /app/node_modules            # keep container’s node_modules
     ports:
       - "8050:5173"                  # map host:container (Vite default 5173)
         # (If you’re on CRA swap to "8050:3000")
     networks:
       - legislative_analysis_network
     depends_on:
       - fastapi
     environment:
       - CHOKIDAR_USEPOLLING=true     # (optional) if file‐watching flakes out
       - CHOKIDAR_INTERVAL=100
     command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

  # open-webui:
  #   image: ghcr.io/open-webui/open-webui:main
  #   container_name: open-webui
  #   ports:
  #     - "3000:8080"
  #   environment:
  #     - 'OLLAMA_BASE_URL=http://ollama:11434'
  #     - 'WEBUI_SECRET_KEY='
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   volumes:
  #     - ollama-webui:/app/backend/data
  #   depends_on:
  #     - ollama
  #   networks:
  #     - legislative_analysis_network
  #   restart: always

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.4.0
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"
  #   networks:
  #     - legislative_analysis_network
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   healthcheck:
  #     test: ["CMD", "bash", "-c", "echo srvr | nc -w 2 localhost 2181 | grep -q 'Mode:'"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 30s

  # kafka:
  #   image: confluentinc/cp-kafka:7.4.0
  #   container_name: kafka
  #   ports:
  #     - "9092:9092"
  #     - "9093:9093"
  #   networks:
  #     - legislative_analysis_network
  #   environment:
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
  #     KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #   depends_on:
  #     zookeeper:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD", "bash", "-c", "kafka-broker-api-versions --bootstrap-server localhost:9092 > /dev/null 2>&1"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 30s

  # cassandra:
  #   image: cassandra:4.1
  #   container_name: cassandra
  #   ports:
  #     - "9042:9042"
  #   networks:
  #     - legislative_analysis_network
  #   environment:
  #     CASSANDRA_CLUSTER_NAME: "LegislativeCluster"
  #   healthcheck:
  #     test: ["CMD", "bash", "-c", "cqlsh -e 'describe keyspaces'"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 30s

networks:
  legislative_analysis_network:
    driver: bridge

volumes:
  ollama: {}
  open-webui: {}